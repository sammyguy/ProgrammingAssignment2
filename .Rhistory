?sample
fac <- sample(L3, 20, replace = TRUE)
fac
fac <- sample(L3, 20, replace = FALSE)
fac <- sample(L3, 10, replace = TRUE)
fac
data.frame(1, 1:10, sample(L3, 10, replace = TRUE))
data.frame(1, 1:10, fac)
data.frame(2, 1:10, fac)
data.frame(2, 1:10, fac, 2:5)
data.frame(2, 1:10, fac, 2:4)
data.frame(2, 1:10, fac, 2:11)
100*0.5 + 25*0 + 80*1.5 + 22*1 + 12*0.5 + 50*0.35 + 30*0.75
0.08*238
qnorm(0.99,1,3)
10*0.009 + 1*0.001
(10*0.009 + 1*0.001)/0.01
100*0.05
1-pbinom(13,1000,TRUE)
1-pbinom(13,1000,0.01,TRUE)
1-pbinom(13,800,0.01,TRUE)
1-pbinom(13,1000,0.01,TRUE)
1-pbinom(13,800,0.01,TRUE)
pbinom(6,1000,0.01,TRUE)
1-pbinom(13,800,0.01,TRUE)
1-pbinom(13,800,0.01,TRUE)
1-pbinom(13,800,0.01,TRUE)
(10*0.009 + 1*0.001)/0.01
0.991*0.991
0.991*0.009*2
0.009*0.009
0.9821+0.0178
(20*0.000081 + 11*(0.01-0.000081))/0.01
qnorm(0.99)
qnorm(0.99)
qnorm(0.95)
2.326348*10/1.64485
qnorm(0.95,10,16)
qnorm(0.95)
qnorm(0.95,10,4)
(10*0.02 + 5*0.03)/0.05
0.93*0.93
0.93*0.02*2
0.02*0.02
0.93*0.03*2
0.03*0.02*2
0.02*0.93*2
0.03*0.03
0.02*0.02*2
0.02*0.03*2
0.02*0.02
0.8649+0.0372
0.9021+0.0004
0.9025+0.0558
0.9583+0.0012
0.9595+0.0372
0.9967+0.0009
0.9976+0.0008
0.9984+0.0012
0.0012+0.0372+0.0009+0.0008+0.0012+0.0004
0.05-0.0417
(4*0.0083 + 6*0.0012 + 9*0.0372 + 10*0.0009 + 11*0.0008 + 15*0.0012 + 20*0.0004)/0.05
qnorm(0.0473)
qnorm(0.0074)
qnorm(0.0473+0.0074)
qnorm(0.9999)
qnorm(0.0019)
qnorm(0.0019+0.0002+0.0018+0.0082+0.0435+0.8941+0.004790.00190.0005)
qnorm(0.0019+0.0002+0.0018+0.0082+0.0435+0.8941+0.00479+0.0019+0.0005)
qnorm(0.0019+0.0002+0.0018+0.0082+0.0435+0.8941+0.00479+0.0019)
qnorm(1-0.0005)
pnorm((qnorm(0.005)+sqrt(0.15)*qnorm(0.999)/sqrt(1-0.15))
pnorm((qnorm(0.005)+sqrt(0.15)*qnorm(0.999)/sqrt(1-0.15))
pnorm((qnorm(0.005)+sqrt(0.15)*qnorm(0.999)/sqrt(1-0.15)))
pnorm(qnorm(0.005)+sqrt(0.15)*qnorm(0.999)/sqrt(1-0.15))
50*0.2*(0.1006825-0.005)
50*0.2*(0.1006825-0.005)*0.08
50*0.2*(0.1006825-0.005)*0.08
pnorm((qnorm(0.005)+sqrt(0.15)*qnorm(0.999)/sqrt(1-0.15))
pnorm((qnorm(0.005)+sqrt(0.15)*qnorm(0.999)/sqrt(1-0.15))
pnorm((qnorm(0.005)+sqrt(0.15)*qnorm(0.999))/sqrt(1-0.15))
WCDR=pnorm((qnorm(0.005)+sqrt(0.15)*qnorm(0.999))/sqrt(1-0.15))
RWA=50*0.2*(WCDR-0.005)
RWA
RWA=50*0.2*(WCDR-0.005)*12.5
RWA
RWA*0.08
RWA
0.62363*12.5
qnorm(0.0006)
qnorm(0.00473)
qnorm(0.0473)
qnorm(0.0473+0.0074)
qnorm(0.0473+0.0074+0.0645)
A = qnorm(0.0006 + 0.0001 + 0.0003 + 0.00110 + 0.0051 + 0.0552 + 0.9088)
A
Aa = qnorm(0.0006 + 0.0001 + 0.0003 + 0.00110 + 0.0051 + 0.0552 + 0.9088 + 0.0282)
Aa
WCDR=pnorm((qnorm(0.01)+sqrt(0.15)*qnorm(0.999))/sqrt(1-0.15))
rho = 0.12*(1 + e^-50*0.001)
rho = 0.12*(1 + exp(-50*0.001)
rho = 0.12*(1 + exp(-50*0.001)
rho = 0.12*(1 + exp(-50*0.001))
rho
rho = 0.03 + 0.13*exp(-35*0.01)
rho
WCDR=pnorm((qnorm(0.01)+sqrt(rho)*qnorm(0.999))/sqrt(1-rho))
WCDR
200*0.7*(WCDR - 0.01)
CapReq = 200*0.7*(WCDR-0.01)
CapReq
12.5*CapReq
PD = 0.003
rho = 0.12*(1)
rho = 0.12*(1+exp(-50*PD))
rho
b = (0.11852 - 0.05478*log(PD))^2
b = (0.11852 - 0.05478*log(0.01))^2
b
b = (0.11852 - 0.05478*log(0.001))^2
b
b = (0.11852 - 0.05478*log(PD))^2
b
MA = (1 + 0.5*b)/(1 - 1.5*b)
MA
WCDR=pnorm((qnorm(PD)+sqrt(rho)*qnorm(0.999))/sqrt(1-rho))
CapRed = 500*0.6*(WCDR-PD)*MA
CapReq = 500*0.6*(WCDR-PD)*MA
CapReq
rho
CapReq
12.5*CapReq
install.packages(KernSmooth)
install.package(KernSmooth)
install.packages(KernSmooth)
?install.packages
install.packages("KernSmooth")
library(KernSmooth)
PD10 <- 0.01/(1-0.6)
PD5 <- (60*0.01/100)/(1-0.6)
PD10
PD5to10 <- (10*PD10 - 5*PD5)/5
PD5to10
x <- 250*4/100000
x
?uniroot
?util
?require
?function
?fib
?tail
fib <- function(n) if (n>2) c(fib(n-1),sum(tail(fib(n-1),2))) else if (n>=0) rep (1,n)
fib(20)
fib(15)
fib(50)
fib(6)
f <- function(y) 2.5exp(-0.5y)+2.5*exp(-1*y)+2.5*exp(-1.5*y)+102.5*exp(-2*y)-98.97
f <- function(y) 2.5*exp(-0.5y)+2.5*exp(-1*y)+2.5*exp(-1.5*y)+102.5*exp(-2*y)-98.97
f <- function(y) 2.5*exp(-0.5*y)+2.5*exp(-1*y)+2.5*exp(-1.5*y)+102.5*exp(-2*y)-98.97
uniroot(f,lower=0,upper=1)
?rlnorm
losses <- rlnorm(100,1,2)
hist(losses, col=3)
losses <- rlnorm(100,1,2)
hist(losses, col=3)
losses <- rlnorm(100,1,2)
hist(losses, col=3)
losses <- rlnorm(100,1,2)
hist(losses, col=3)
quantile(losses, type=3)
quantile(losses, 0.95, type=3)
worst_losses <- losses[51:100]
worst_losses
quantile(worst_losses, 0.95, type=3)
quantile(losses, 0.95, type=3)
quantile(losses, 0.975, type=3)
require(XLConnect)
install.packages("XLConnect", dependencies=TRUE)
require(XLConnect)
wb <- loadWorkbook("~/Desktop/TradingPositions.xlsx", create=FALSE)
df <- readWorkSheet(wb, sheet="Daily", startRow=3, endRow=20)
df <- readWorksheet(wb, sheet="Daily", startRow=3, endRow=20)
df
S0 <- 3
sigmaS <- 0.8
r <- 0.05
T <- 1
B <- 10
Merton_solve <- function(param){
V0 <- param[1]
sigmaV <- param[2]
d1 <- (log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2 <- d1-sigmaV*sqrt(T)
F <- V0*pnorm(d1)-B*exp(-r*T)*pnorm(d2)-S0
G <- pnor(d1)*sigmaV*V0-sigmaS*S0
return(F^2+G^2)
}
?optim
solutions <- optim(c(V0=10,sigmaV=0.1), Merton_solve)
Merton_solve <- function(param){
+ V0 <- param[1]
+ sigmaV <- param[2]
+ d1 <- (log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
+ d2 <- d1-sigmaV*sqrt(T)
+ F <- V0*pnorm(d1)-B*exp(-r*T)*pnorm(d2)-S0
G
Merton_solve <- function(param){
V0 <- param[1]
sigmaV <- param[2]
d1 <- (log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2 <- d1-sigmaV*sqrt(T)
F <- V0*pnorm(d1)-B*exp(-r*T)*pnorm(d2)-S0
G <- pnorm(d1)*sigmaV*V0-sigmaS*S0
return(F^2+G^2)
}
solutions <- optim(c(V0=10,sigmaV=0.5), Merton_solve)
V0
V0
solutions <- optim(c(V0=10,sigmaV=0.5), Merton_solve)
sigmaV
Merton_solve
solutions
d1
T
d1 <- (log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
V0
V0=12.3954
d1 <- (log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
sigmaV=0.2123013
d1 <- (log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2 <- d1-sigmaV*sqrt(T)
pnorm(-d2)
S0=5
solutions <- optim(c(V0=10,sigmaV=0.5), Merton_solve)
V0
solutions
pnorm(-d2)
V0=14.3850809
sigmaV=0.296227
d1 <- (log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2 <- d1-sigmaV*sqrt(T)
pnorm(-d2)
V0
solutions
V0 <- solutions$param[1]
sigmaV <- solutions$param[2]
V0
sigmaV
sigmaV <- solutions$par[2]
V0 <- solutions$par[1]
V0
sigmaV
S0=8
sigmaS=0.75
r=0.06
T=1
B=7.5
solutions <- optim(c(V0=10,sigmaV=0.1), Merton_solve)
V0=solutions$par[1]
sigmaV=solutions$par[2]
d1 <- (log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2 <- d1-sigmaV*sqrt(T)
pnorm(-d2)
B=14
solutions <- optim(c(V0=10,sigmaV=0.5), Merton_solve)
sigmaV=solutions$par[2]
V0=solutions$par[1]
sigmaV=solutions$par[2]
d1 <- (log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2 <- d1-sigmaV*sqrt(T)
pnorm(-d2)
S0=11
sigmaS=0.7
r=0.06
T=1
B=18
solutions <- optim(c(V0=10,sigmaV=0.1), Merton_solve)
V0=solutions$par[1]
sigmaV=solutions$par[2]
d1 <- (log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2 <- d1-sigmaV*sqrt(T)
pnorm(-d2)
B=15
solutions <- optim(c(V0=10,sigmaV=0.1), Merton_solve)
V0=solutions$par[1]
sigmaV=solutions$par[2]
d1 <- (log(V0/B)+(r+sigmaV^2/2)*T)/(sigmaV*sqrt(T))
d2 <- d1-sigmaV*sqrt(T)
pnorm(-d2)
B=15
r=0.06
T=1
d2
qnorm(0.02)
qnorm(0.0484)
qnorm(0.02)
d2 = -qnorm(0.02)
d2
sigmaV=0.3
B=15
d1 = d2+sigmaV
d1
x = d1*sigmaV - (r+sigmaV^2/2)
x
log10
log1
log(10)
exp(2.3025)
exp(2.302585)
V0=B*exp(x)
V0
qnorm(0.19)
qnorm(0.0019)
qnorm(1-0.0005)
EAD = 50
LGD = 0.2
PD = 0.005
rho = 0.15
WCDR = pnorm((qnorm(PD)+sqrt(rho)*qnorm(0.999))/sqrt(1-rho))
WCDR
CapReq = EAD*LGD*(WCDR-PD)
CapReq
RWA = 12.5*CapReq
RWA
qnorm(0.0006)
qnorm(1-0.0282-0.0006)
qnorm(1-0.0006)
EAD = 200
LGD = 0.7
PD = 0.01
rho = 0.12*(1+exp(-50*PD))
rho
b = (0.11852-0.05478*log(PD))^2
b
rho = 0.03 + 0.13*exp(-35*PD)
rho
WCDR = pnorm((qnorm(PD)+sqrt(rho)*qnorm(0.999))/sqrt(1-rho))
WCDR
CapReq = EAD*LGD*(WCDR-PD)
CapReq
CapReq*12.5
EAD = 500
PD = 0.003
LGD = 0.6
rho = 0.12*(1+exp(-50*PD))
rho
b = (0.11852-0.05478*log(PD))^2
MA = (1+0.5*b)/(1-1.5*b)
WCDR = pnorm((qnorm(PD)+sqrt(rho)*qnorm(0.999))/sqrt(1-rho))
CapReq = EAD*LGD*(WCDR-PD)*MA
CapReq
CapReq*12.5
PD5 = 0.6/(1-0.6)
PD5
PD5 = (0.6/100)/(1-0.6)
PD5
PD10 = (1/100)/(1-0.6)
PD10
(10*PD10 - 5*PD5)/5
losses = rlnorm(200,1,2)
hist(losses,col=3)
quantile(losses,0.95,type=3)
losses = sort(losses)
worstlosses = losses[101:200]
quantile(worstlosses,0.95,type=3)
quantile(losses,0.975,type=3)
install.package(knitr)
install.package("knitr")
?install.package
?install
install.packages("knitr")
qnorm(0.0019)
qnorm(1.22/100)
qnorm(0.0122)
1.22+0.09
qnorm(1.31/100)
ls
clear
EAD = 200
LGD = 0.7
PD = 0.02
T = 1
rho = 0.12*(1+exp(-50*PD))
b = (0.11852-0.05478*log(PD))^2
b
WCDR = pnorm((qnorm(PD)+sqrt(rho)*qnorm(0.999))/sqrt(1-rho))
WCDR
rho
rho1 = 0.1641
WCDR = pnorm((qnorm(PD)+sqrt(rho1)*qnorm(0.999))/sqrt(1-rho1))
WCDR
MA =
MA = 1
WCDR1 = 0.1902
CapReq = EAD*LGD*(WCDR1-PD)*MA
CapReq
250*4
1000/100000
0.9/100 *100000000
900000/4
3000*4
12000/1000000
(12000/1000000)*100
1.2/0.01
1/(1-0.6)
50/10000
60/10000
0.006/(1-0.6)
100/10000
0.01/(1-0.6)
(3000*4/1000000)*100
(120/10000)/(1-0.4)
120/10000
0.012/(1-0.4)
PD2 = 0.02
PD5 = (160/10000)/(1-0.4)
(5*PD5 - 2*PD2)/3
swirl()
library(swirl)
rm(list=ls())
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
c(0.5,55,-10,6)
num_vect <- c(0.5,55.0,-10.0,6.0)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Sam")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(1,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=1, bar=2, norf=NA)
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(data=1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(data=1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
?colnames
colnames(my_data) <- cnames
my_data
bye()
setwd("~/ProgrammingAssignment2")
?numeric
